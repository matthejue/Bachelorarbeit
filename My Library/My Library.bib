
@online{noauthor_manjaro_2022,
	title = {manjaro},
	url = {https://wallpapercave.com/w/wp9774690},
	urldate = {2022-01-28},
	date = {2022-01-28},
}

@book{parr_language_2009,
	title = {Language Implementation Patterns: Create Your Own Domain-Specific and General Programming Languages},
	isbn = {978-1-68050-374-6},
	shorttitle = {Language Implementation Patterns},
	abstract = {Learn to build configuration file readers, data readers, model-driven code generators, source-to-source translators, source analyzers, and interpreters. You don't need a background in computer science–{ANTLR} creator Terence Parr demystifies language implementation by breaking it down into the most common design patterns. Pattern by pattern, you'll learn the key skills you need to implement your own computer languages.Knowing how to create domain-specific languages ({DSLs}) can give you a huge productivity boost. Instead of writing code in a general-purpose programming language, you can first build a custom language tailored to make you efficient in a particular domain.The key is understanding the common patterns found across language implementations. Language Design Patterns identifies and condenses the most common design patterns, providing sample implementations of each.The pattern implementations use Java, but the patterns themselves are completely general. Some of the implementations use the well-known {ANTLR} parser generator, so readers will find this book an excellent source of {ANTLR} examples as well. But this book will benefit anyone interested in implementing languages, regardless of their tool of choice. Other language implementation books focus on compilers, which you rarely need in your daily life. Instead, Language Design Patterns shows you patterns you can use for all kinds of language applications.You'll learn to create configuration file readers, data readers, model-driven code generators, source-to-source translators, source analyzers, and interpreters. Each chapter groups related design patterns and, in each pattern, you'll get hands-on experience by building a complete sample implementation. By the time you finish the book, you'll know how to solve most common language implementation problems.},
	pagetotal = {456},
	publisher = {Pragmatic Bookshelf},
	author = {Parr, Terence},
	date = {2009-12-31},
	keywords = {Computers / General, Computers / Programming / Compilers, Computers / Programming / General, Computers / Software Development \& Engineering / General},
	annotation = {Google-Books-{ID}: Ag9QDwAAQBAJ},
}

@online{keith_singleton_2022,
	title = {Singleton Pattern In Python},
	url = {https://stackoverflow.com/questions/52351312/singleton-pattern-in-python},
	author = {{Keith}},
	urldate = {2022-01-28},
	date = {2022-01-28},
}

@online{noauthor_course_2022,
	title = {Course Webpage for Compilers (P423, P523, E313, and E513)},
	url = {https://iucompilercourse.github.io/IU-Fall-2021/},
	abstract = {Course web page for Fall 2021.},
	urldate = {2022-01-28},
	date = {2022-01-28},
}

@software{drew_othneildrewbest-readme-template_2022,
	title = {othneildrew/Best-{README}-Template},
	url = {https://github.com/othneildrew/Best-README-Template},
	abstract = {An awesome {README} template to jumpstart your projects!},
	author = {Drew, Othneil},
	urldate = {2022-01-28},
	date = {2022-01-28},
	keywords = {readme, readme-template},
	annotation = {Programmers: \_:n19 Programmers: \_:n16 original-date: 2018-12-10T17:56:03Z},
}

@online{noauthor_cmd2indexrst_2022,
	title = {cmd2/index.rst at bef3c758829fe2aa82d58699d61fa78aa961f29d · python-cmd2/cmd2},
	url = {https://github.com/python-cmd2/cmd2},
	abstract = {cmd2 - quickly build feature-rich and user-friendly interactive command line applications in Python - cmd2/index.rst at bef3c758829fe2aa82d58699d61fa78aa961f29d · python-cmd2/cmd2},
	urldate = {2022-01-28},
	date = {2022-01-28},
}

@software{griffiths_scott-griffithsbitstring_2022,
	title = {scott-griffiths/bitstring},
	url = {https://github.com/scott-griffiths/bitstring},
	abstract = {A Python module to help you manage your bits},
	author = {Griffiths, Scott},
	urldate = {2022-01-28},
	date = {2022-01-20},
	keywords = {binary-data, bit-manipulation, bitarray, bitstring, python},
	annotation = {Programmers: \_:n27 Programmers: \_:n24 original-date: 2015-04-11T20:49:04Z},
}

@software{klockner_pudb_2022,
	title = {{PuDB}: a console-based visual debugger for Python},
	url = {https://github.com/inducer/pudb},
	shorttitle = {{PuDB}},
	abstract = {Full-screen console debugger for Python},
	author = {Klöckner, Andreas},
	urldate = {2022-01-28},
	date = {2022-01-25},
	keywords = {python, bpython, debug, debugger, ipython, pdb, pytest, pytest-plugin, urwid},
	annotation = {Programmers: \_:n35 Programmers: \_:n32 original-date: 2011-05-13T23:44:30Z},
}

@software{astanin_python-tabulate_2022,
	title = {python-tabulate},
	url = {https://github.com/astanin/python-tabulate},
	abstract = {Pretty-print tabular data in Python, a library and a command-line utility. Repository migrated from bitbucket.org/astanin/python-tabulate.},
	author = {Astanin, Sergey},
	urldate = {2022-01-28},
	date = {2022-01-26},
	annotation = {Programmers: \_:n47 Programmers: \_:n44 original-date: 2019-09-02T14:34:19Z},
}

@online{noauthor_zotero_2022,
	title = {Zotero {\textbackslash}textbar Your personal research assistant},
	url = {https://www.zotero.org/},
	urldate = {2022-01-28},
	date = {2022-01-28},
}

@software{reinhart_jonathonreinhartstaticx_2022,
	title = {{JonathonReinhart}/staticx},
	url = {https://github.com/JonathonReinhart/staticx},
	abstract = {Create static executable from dynamic executable},
	author = {Reinhart, Jonathon},
	urldate = {2022-01-28},
	date = {2022-01-23},
	annotation = {Programmers: \_:n53 original-date: 2017-05-27T18:37:54Z},
}

@online{noauthor_faq_2022,
	title = {{FAQ} · pyinstaller/pyinstaller Wiki},
	url = {https://github.com/pyinstaller/pyinstaller},
	abstract = {Freeze (package) Python programs into stand-alone executables - {FAQ} · pyinstaller/pyinstaller Wiki},
	urldate = {2022-01-28},
	date = {2022-01-28},
}

@online{noauthor_releases_2022,
	title = {Releases · jgraph/drawio-desktop},
	url = {https://github.com/jgraph/drawio-desktop/releases},
	abstract = {Official electron build of diagrams.net. Contribute to jgraph/drawio-desktop development by creating an account on {GitHub}.},
	urldate = {2022-01-28},
	date = {2022-01-28},
}

@online{noauthor_github_2022,
	title = {{GitHub} - marp-team/marp-cli: A {CLI} interface for Marp and Marpit based converters},
	url = {https://github.com/marp-team/marp-cli},
	urldate = {2022-01-28},
	date = {2022-01-28},
}

@software{noauthor_pyinstaller_2022,
	title = {{PyInstaller} Overview},
	url = {https://github.com/pyinstaller/pyinstaller},
	abstract = {Freeze (package) Python programs into stand-alone executables},
	publisher = {{PyInstaller}},
	urldate = {2022-01-28},
	date = {2022-01-28},
	keywords = {python, bundle, package, py2app, py2exe, pyinstaller, python-3, python-to-exe},
	annotation = {original-date: 2011-11-23T11:05:56Z},
}

@online{noauthor_running_2020,
	title = {Running a bash script - Code to Cloud / {GitHub} Actions},
	url = {https://github.community/t/running-a-bash-script/141584/2},
	abstract = {With that setup the path to the script is relative to the root of your repository, so if your script is .github/script.sh that’s all that’s needed in the run step. Remember that the file must be marked as executable, or you need to explicitly call bash with the script as parameter.},
	urldate = {2022-04-11},
	date = {2020-11-04},
	file = {Snapshot:files/24/2.html:text/html;Snapshot:files/85/2.html:text/html},
}

@software{noauthor_actionsstarter-workflows_2022,
	title = {actions/starter-workflows},
	url = {https://github.com/actions/starter-workflows/blob/70f16d3552b2b728227019eb69710ed1b44cf811/ci/python-package.yml},
	abstract = {Accelerating new {GitHub} Actions workflows},
	publisher = {{GitHub} Actions},
	urldate = {2022-04-11},
	date = {2022-04-11},
	annotation = {original-date: 2019-07-29T16:26:51Z},
}

@inreference{noauthor_identifier_2022,
	title = {Identifier (computer languages)},
	url = {https://en.wikipedia.org/w/index.php?title=Identifier_(computer_languages)&oldid=1081115854},
	abstract = {In computer programming languages, an identifier is a lexical token (also called a symbol, but not to be confused with the symbol primitive data type) that names the language's entities. Some of the kinds of entities an identifier might denote include variables, data types, labels, subroutines, and modules.},
	booktitle = {Wikipedia},
	urldate = {2022-04-13},
	date = {2022-04-05},
	annotation = {Page Version {ID}: 1081115854},
	file = {Snapshot:files/29/Identifier_(computer_languages).html:text/html;Snapshot:files/88/Identifier_(computer_languages).html:text/html},
}

@online{ljohhuh_what_2018,
	title = {What is an immediate value?},
	url = {https://reverseengineering.stackexchange.com/q/17671},
	author = {{Ljohhuh}},
	urldate = {2022-04-13},
	date = {2018-04-04},
	file = {Snapshot:files/31/what-is-an-immediate-value.html:text/html;Snapshot:files/90/what-is-an-immediate-value.html:text/html},
}

@online{skochinsky_answer_2018,
	title = {Answer to "What is an immediate value?"},
	url = {https://reverseengineering.stackexchange.com/a/17678},
	shorttitle = {Answer to "What is an immediate value?},
	author = {Skochinsky, Igor},
	urldate = {2022-04-13},
	date = {2018-03-13},
	file = {Snapshot:files/33/what-is-an-immediate-value.html:text/html;Snapshot:files/92/what-is-an-immediate-value.html:text/html},
}

@online{noauthor_qualifiers_2020,
	title = {Qualifiers in C [ Size, Sign and Type Qualifiers in Detail ]},
	url = {https://learnprogramo.com/qualifiers-in-c-9/},
	abstract = {Qualifiers in C. The Qualifiers are the keywords which are applied to the data types. There are three types of qualifiers in C. 1.Type Qualifiers 2.Size Qua},
	urldate = {2022-04-13},
	date = {2020-05-18},
	annotation = {Section: Tutorials},
	file = {Snapshot:files/36/qualifiers-in-c-9.html:text/html;Snapshot:files/94/qualifiers-in-c-9.html:text/html},
}

@online{noauthor_pep_nodate,
	title = {{PEP} 20 – The Zen of Python {\textbackslash}textbar peps.python.org},
	url = {https://peps.python.org/pep-0020/#id3},
	urldate = {2022-04-13},
	file = {PEP 20 – The Zen of Python | peps.python.org:files/38/pep-0020.html:text/html},
}

@article{earley_formalism_1970,
	title = {A formalism for translator interactions},
	doi = {10.1145/355598.362740},
	abstract = {A formalism is presented for describing the actions of processors for programming languages—compilers, interpreters, assemblers—and their interactions in complex systems such as compiler-compilers or extendible languages. The formalism here might be used to define and answer such a question as “Can one do bootstrapping using a metacompiler whose metaphase is interpretive?” In addition an algorithm is presented for deciding whether or not a given system can be produced from a given set of component processors.},
	journaltitle = {{CACM}},
	author = {Earley, J. and Sturgis, Howard E.},
	date = {1970},
}

@online{noauthor_c_nodate,
	title = {C Operator Precedence - cppreference.com},
	url = {https://en.cppreference.com/w/c/language/operator_precedence},
	urldate = {2022-04-27},
	file = {C Operator Precedence - cppreference.com:files/41/operator_precedence.html:text/html;C Operator Precedence - cppreference.com:files/99/operator_precedence.html:text/html},
}

@online{noauthor_lecture-notes-2021_2022,
	title = {lecture-notes-2021},
	url = {https://github.com/Compiler-Construction-Uni-Freiburg/lecture-notes-2021/blob/56300e6649e32f0594bbbd046a2e19351c57dd0c/material/lexical-analysis.pdf},
	urldate = {2022-04-28},
	date = {2022-01-20},
	annotation = {original-date: 2021-10-19T12:38:11Z},
}

@software{noauthor_neovim_2022,
	title = {Neovim Treesitter Playground},
	url = {https://github.com/nvim-treesitter/playground},
	abstract = {Treesitter playground integrated into Neovim},
	publisher = {nvim-treesitter},
	urldate = {2022-05-03},
	date = {2022-05-03},
	keywords = {hacktoberfest, neovim, nvim-treesitter, tree-sitter},
	annotation = {original-date: 2020-07-23T13:07:27Z},
}

@software{noauthor_nvim-treesitter_2022,
	title = {nvim-treesitter},
	url = {https://github.com/nvim-treesitter/nvim-treesitter},
	abstract = {Nvim Treesitter configurations and abstraction layer},
	publisher = {nvim-treesitter},
	urldate = {2022-05-03},
	date = {2022-05-03},
	keywords = {hacktoberfest, neovim, nvim-treesitter, tree-sitter},
	annotation = {original-date: 2020-04-18T15:24:10Z},
}

@online{margus_answer_2011,
	title = {Answer to "Iterating over every two elements in a list"},
	url = {https://stackoverflow.com/a/5389578},
	author = {{Margus}},
	urldate = {2022-05-03},
	date = {2011-03-22},
}

@online{awesoon_answer_2013,
	title = {Answer to "why const char *pt2=\{'1', '2', '3', '{\textbackslash}textbackslash0'\}; can't compile?"},
	url = {https://stackoverflow.com/a/16808070},
	shorttitle = {Answer to "why const char *pt2=\{'1', '2', '3', '{\textbackslash}textbackslash0'\}; can't compile?},
	author = {{awesoon}},
	urldate = {2022-05-07},
	date = {2013-05-29},
	file = {Snapshot:files/54/why-const-char-pt2-1-2-3-0-cant-compile.html:text/html},
}

@online{lindley_answer_2013,
	title = {Answer to "Assign array to array"},
	url = {https://stackoverflow.com/a/18962507},
	author = {Lindley, Benjamin},
	urldate = {2022-05-07},
	date = {2013-09-23},
}

@online{blckknght_answer_2016,
	title = {Answer to "What is a pythonic way of slicing a set?"},
	url = {https://stackoverflow.com/a/40737853},
	shorttitle = {Answer to "What is a pythonic way of slicing a set?},
	author = {{Blckknght}},
	urldate = {2022-05-09},
	date = {2016-11-22},
	file = {Snapshot:files/57/what-is-a-pythonic-way-of-slicing-a-set.html:text/html;Snapshot:files/110/what-is-a-pythonic-way-of-slicing-a-set.html:text/html},
}

@online{noauthor_errors_nodate,
	title = {Errors in C/C++ - {GeeksforGeeks}},
	url = {https://www.geeksforgeeks.org/errors-in-cc/},
	urldate = {2022-05-10},
}

@online{mahajan_scaler_2022,
	title = {Scaler Topics},
	url = {https://www.scaler.com/topics/c/types-of-errors-in-c/},
	abstract = {This article by Scaler Topics explains errors \& their types in C, covering the explanation \& examples for each type of error in C Programming Language.},
	author = {Mahajan, Urvish},
	urldate = {2022-05-10},
	date = {2022-01-28},
	file = {Snapshot:files/62/types-of-errors-in-c.html:text/html;Snapshot:files/114/types-of-errors-in-c.html:text/html},
}

@online{noauthor_visual_nodate,
	title = {visual c++ - Where can I get a list of all errors \& warnings? - Stack Overflow},
	url = {https://stackoverflow.com/questions/1392855/where-can-i-get-a-list-of-all-errors-warnings},
	urldate = {2022-05-10},
	file = {visual c++ - Where can I get a list of all errors & warnings? - Stack Overflow:files/64/where-can-i-get-a-list-of-all-errors-warnings.html:text/html;visual c++ - Where can I get a list of all errors & warnings? - Stack Overflow:files/116/where-can-i-get-a-list-of-all-errors-warnings.html:text/html},
}

@online{noauthor_what_nodate,
	title = {What is the difference between a token and a lexeme?},
	url = {http://newbedev.com/what-is-the-difference-between-a-token-and-a-lexeme},
	abstract = {Using "Compilers Principles, Techniques, \& Tools, 2nd Ed." ({WorldCat}) by Aho, Lam, Sethi and Ullman, {AKA} the Purple Dragon Book, Lexeme pg. 111 A lexeme is a se},
	titleaddon = {{NewbeDEV}},
	urldate = {2022-06-17},
	langid = {american},
	file = {Snapshot:files/66/what-is-the-difference-between-a-token-and-a-lexeme.html:text/html;Snapshot:files/118/what-is-the-difference-between-a-token-and-a-lexeme.html:text/html},
}

@online{noauthor_zotero_2022-1,
	title = {Zotero {\textbackslash}textbackslashtextbar Your personal research assistant},
	url = {https://www.zotero.org/},
	urldate = {2022-01-28},
	date = {2022-01-28},
}

@online{noauthor_pep_nodate-1,
	title = {{PEP} 20 – The Zen of Python {\textbackslash}textbackslashtextbar peps.python.org},
	url = {https://peps.python.org/pep-0020/#id3},
	urldate = {2022-04-13},
	file = {PEP 20 – The Zen of Python | peps.python.org:files/96/pep-0020.html:text/html},
}

@software{noauthor_lark_2022,
	title = {Lark - a parsing toolkit for Python},
	url = {https://github.com/lark-parser/lark},
	abstract = {Lark is a parsing toolkit for Python, built with a focus on ergonomics, performance and modularity.},
	publisher = {Lark - Parsing Library \& Toolkit},
	urldate = {2022-04-28},
	date = {2022-04-26},
	keywords = {python, cyk, earley, grammar, lalr, lark, parse, parser, parser-library, parsing-engine, parsing-library, tree},
}

@online{awesoon_answer_2013-1,
	title = {Answer to "why const char *pt2=\{'1', '2', '3', '{\textbackslash}textbackslashtextbackslash0'\}; can't compile?"},
	url = {https://stackoverflow.com/a/16808070},
	shorttitle = {Answer to "why const char *pt2=\{'1', '2', '3', '{\textbackslash}textbackslashtextbackslash0'\}; can't compile?},
	author = {{awesoon}},
	urldate = {2022-05-07},
	date = {2013-05-29},
	file = {Snapshot:files/107/why-const-char-pt2-1-2-3-0-cant-compile.html:text/html},
}

@online{noauthor_compiler_nodate,
	title = {Compiler Design - Phases of Compiler},
	url = {https://www.tutorialspoint.com/compiler_design/compiler_design_phases_of_compiler.htm},
	urldate = {2022-06-19},
}

@online{noauthor_earley_nodate,
	title = {Earley Parser},
	url = {https://rahul.gopinath.org/post/2021/02/06/earley-parsing/},
	urldate = {2022-06-20},
}

@online{noauthor_parsers_nodate,
	title = {Parsers — Lark documentation},
	url = {https://lark-parser.readthedocs.io/en/latest/parsers.html},
	urldate = {2022-06-20},
	file = {Parsers — Lark documentation:files/122/parsers.html:text/html},
}

@online{noauthor_what_nodate-1,
	title = {What is Bottom-up Parsing?},
	url = {https://www.tutorialspoint.com/what-is-bottom-up-parsing},
	urldate = {2022-06-22},
	file = {What is Bottom-up Parsing?:files/124/what-is-bottom-up-parsing.html:text/html},
}

@online{noauthor_what_nodate-2,
	title = {What is Top-Down Parsing?},
	url = {https://www.tutorialspoint.com/what-is-top-down-parsing},
	urldate = {2022-06-22},
	file = {What is Top-Down Parsing?:files/126/what-is-top-down-parsing.html:text/html},
}
