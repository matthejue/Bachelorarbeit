File 
  Name './example_faculty_it.reti_patch', 
  [
    Block 
      Name 'start.7', 
      [
        # // Exp(GoTo(Name('main.0')))
        Exp(GoTo(Name('main.0')))
      ], 
    Block 
      Name 'faculty.6', 
      [
        # // Assign(Name('res'), Num('1'))
        # Exp(Num('1'))
        SUBI SP 1;
        LOADI ACC 1;
        STOREIN SP ACC 1;
        # Assign(Stackframe(Num('1')), Stack(Num('1')))
        LOADIN SP ACC 1;
        STOREIN BAF ACC -3;
        ADDI SP 1;
        # // While(Num('1'), [])
        # Exp(GoTo(Name('condition_check.5')))
        # // not included Exp(GoTo(Name('condition_check.5')))
      ], 
    Block 
      Name 'condition_check.5', 
      [
        # // IfElse(Num('1'), [], [])
        # Exp(Num('1'))
        SUBI SP 1;
        LOADI ACC 1;
        STOREIN SP ACC 1;
        # IfElse(Stack(Num('1')), [], [])
        LOADIN SP ACC 1;
        ADDI SP 1;
        JUMP== GoTo(Name('while_after.1'));
        # // not included Exp(GoTo(Name('while_branch.4')))
      ], 
    Block 
      Name 'while_branch.4', 
      [
        # // If(Atom(Name('n'), Eq('=='), Num('1')), [])
        # // IfElse(Atom(Name('n'), Eq('=='), Num('1')), [], [])
        # Exp(Stackframe(Num('0')))
        SUBI SP 1;
        LOADIN BAF ACC -2;
        STOREIN SP ACC 1;
        # Exp(Num('1'))
        SUBI SP 1;
        LOADI ACC 1;
        STOREIN SP ACC 1;
        LOADIN SP ACC 2;
        LOADIN SP IN2 1;
        SUB ACC IN2;
        JUMP== 3;
        LOADI ACC 0;
        JUMP 2;
        LOADI ACC 1;
        STOREIN SP ACC 2;
        ADDI SP 1;
        # IfElse(Stack(Num('1')), [], [])
        LOADIN SP ACC 1;
        ADDI SP 1;
        JUMP== GoTo(Name('if_else_after.2'));
        # // not included Exp(GoTo(Name('if.3')))
      ], 
    Block 
      Name 'if.3', 
      [
        # // Return(Name('res'))
        # Exp(Stackframe(Num('1')))
        SUBI SP 1;
        LOADIN BAF ACC -3;
        STOREIN SP ACC 1;
        # Return(Stack(Num('1')))
        LOADIN SP ACC 1;
        ADDI SP 1;
        LOADIN BAF PC -1;
      ], 
    Block 
      Name 'if_else_after.2', 
      [
        # // Assign(Name('res'), BinOp(Name('n'), Mul('*'), Name('res')))
        # Exp(Stackframe(Num('0')))
        SUBI SP 1;
        LOADIN BAF ACC -2;
        STOREIN SP ACC 1;
        # Exp(Stackframe(Num('1')))
        SUBI SP 1;
        LOADIN BAF ACC -3;
        STOREIN SP ACC 1;
        # Exp(BinOp(Stack(Num('2')), Mul('*'), Stack(Num('1'))))
        LOADIN SP ACC 2;
        LOADIN SP IN2 1;
        MULT ACC IN2;
        STOREIN SP ACC 2;
        ADDI SP 1;
        # Assign(Stackframe(Num('1')), Stack(Num('1')))
        LOADIN SP ACC 1;
        STOREIN BAF ACC -3;
        ADDI SP 1;
        # // Assign(Name('n'), BinOp(Name('n'), Sub('-'), Num('1')))
        # Exp(Stackframe(Num('0')))
        SUBI SP 1;
        LOADIN BAF ACC -2;
        STOREIN SP ACC 1;
        # Exp(Num('1'))
        SUBI SP 1;
        LOADI ACC 1;
        STOREIN SP ACC 1;
        # Exp(BinOp(Stack(Num('2')), Sub('-'), Stack(Num('1'))))
        LOADIN SP ACC 2;
        LOADIN SP IN2 1;
        SUB ACC IN2;
        STOREIN SP ACC 2;
        ADDI SP 1;
        # Assign(Stackframe(Num('0')), Stack(Num('1')))
        LOADIN SP ACC 1;
        STOREIN BAF ACC -2;
        ADDI SP 1;
        # Exp(GoTo(Name('condition_check.5')))
        Exp(GoTo(Name('condition_check.5')))
      ], 
    Block 
      Name 'while_after.1', 
      [
        # Return(Empty())
        LOADIN BAF PC -1;
      ], 
    Block 
      Name 'main.0', 
      [
        # StackMalloc(Num('2'))
        SUBI SP 2;
        # Exp(Num('4'))
        SUBI SP 1;
        LOADI ACC 4;
        STOREIN SP ACC 1;
        # NewStackframe(Name('faculty'), GoTo(Name('addr@next_instr')))
        MOVE BAF ACC;
        ADDI SP 3;
        MOVE SP BAF;
        SUBI SP 4;
        STOREIN BAF ACC 0;
        LOADI ACC GoTo(Name('addr@next_instr'));
        ADD ACC CS;
        STOREIN BAF ACC -1;
        # Exp(GoTo(Name('faculty.6')))
        Exp(GoTo(Name('faculty.6')))
        # RemoveStackframe()
        MOVE BAF IN1;
        LOADIN IN1 BAF 0;
        MOVE IN1 SP;
        # Exp(ACC)
        SUBI SP 1;
        STOREIN SP ACC 1;
        LOADIN SP ACC 1;
        ADDI SP 1;
        CALL PRINT ACC;
        # Return(Empty())
        LOADIN BAF PC -1;
      ]
  ]