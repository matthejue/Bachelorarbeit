
Identifier (computer languages)
From Wikipedia, the free encyclopedia
Jump to navigation Jump to search
	
This article needs additional citations for verification . Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed.
Find sources:   "Identifier" computer languages  –  news   · newspapers   · books   · scholar   · JSTOR ( September 2019 ) ( Learn how and when to remove this template message )
Wiki letter w.svg
	
This article is missing information about Unicode character and UAX31 recommendation. Please expand the article to include this information. Further details may exist on the talk page . ( March 2021 )

In computer programming languages , an identifier is a lexical token (also called a symbol , but not to be confused with the symbol primitive data type ) that names the language's entities. Some of the kinds of entities an identifier might denote include variables , data types , labels , subroutines , and modules .
Contents

    1 Lexical form
    2 Semantics
    3 References
    4 See also

Lexical form [ edit ]

Which character sequences is constitute identifiers depends on the lexical grammar of the language. A common rule is alphanumeric sequences, with underscore also allowed (in some languages, _ is not allowed), and with the condition that it can not begin with a numerical digit (to simplify lexing by avoiding confusing with integer literals ) – so foo, foo1, foo_bar, _foo are allowed, but 1foo is not – this is the definition used in earlier versions of C and C++ , Python , and many other languages. Later versions of these languages, along with many other modern languages, support many more Unicode characters in an identifier. However, a common restriction is not to permit whitespace characters and language operators; this simplifies tokenization by making it free-form and context-free . For example, forbidding + in identifiers due to its use as a binary operation means that a+b and a + b can be tokenized the same, while if it were allowed, a+b would be an identifier, not an addition. Whitespace in identifier is particularly problematic, as if spaces are allowed in identifiers, then a clause such as if rainy day then 1 is legal, with rainy day as an identifier, but tokenizing this requires the phrasal context of being in the condition of an if clause. Some languages do allow spaces in identifiers, however, such as ALGOL 68 and some ALGOL variants – for example, the following is a valid statement: real half pi; which could be entered as .real. half pi; (keywords are represented in boldface, concretely via stropping ). In ALGOL this was possible because keywords are syntactically differentiated, so there is no risk of collision or ambiguity, spaces are eliminated during the line reconstruction phase, and the source was processed via scannerless parsing , so lexing could be context-sensitive.

In most languages, some character sequences have the lexical form of an identifier but are known as keywords – for example, if is frequently a keyword for an if clause, but lexically is of the same form as ig or foo namely a sequence of letters. This overlap can be handled in various ways: these may be forbidden from being identifiers – which simplifies tokenization and parsing – in which case they are reserved words ; they may both be allowed but distinguished in other ways, such as via stropping; or keyword sequences may be allowed as identifiers and which sense is determined from context, which requires a context-sensitive lexer. Non-keywords may also be reserved words (forbidden as identifiers), particularly for forward compatibility , in case a word may become a keyword in future. In a few languages, e.g., PL/1 , the distinction is not clear.
Semantics [ edit ]

The scope, or accessibility within a program of an identifier can be either local or global. A global identifier is declared outside of functions and is available throughout the program. A local identifier is declared within a specific function and only available within that function. [1]

For implementations of programming languages that are using a compiler , identifiers are often only compile time entities. That is, at runtime the compiled program contains references to memory addresses and offsets rather than the textual identifier tokens (these memory addresses, or offsets, having been assigned by the compiler to each identifier).

In languages that support reflection , such as interactive evaluation of source code (using an interpreter or an incremental compiler), identifiers are also runtime entities, sometimes even as first-class objects that can be freely manipulated and evaluated. In Lisp , these are called symbols .

Compilers and interpreters do not usually assign any semantic meaning to an identifier based on the actual character sequence used. However, there are exceptions. For example:

    In Perl a variable is indicated using a prefix called a sigil , which specifies aspects of how the variable is interpreted in expressions .
    In Ruby a variable is automatically considered immutable if its identifier starts with a capital letter.
    In Fortran , the first letter in a variable's name indicates whether by default it is created as an integer or floating point variable.
    In Go , the capitalization of the first letter of a variable's name determines its visibility (uppercase for public, lowercase for private).

In some languages such as Go, identifiers uniqueness is based on their spelling and their visibility. [2]

In HTML an identifier is one of the possible attributes of an HTML element . It is unique within the document.
References [ edit ]

    ^ Malik, D. (2014). C++ programming : from problem analysis to program design (7th ed.). Cenage Learning. p. 397. ISBN   978-1-285-85274-4 .
    ^ "The Go Programming Language Specification - The Go Programming Language" . Golang.org. 2013-05-08 . Retrieved 2013-06-05 .

See also [ edit ]

    Naming convention (programming) 

Retrieved from ""
Categories :

    Identifiers
    Programming language concepts
    Metadata
    Syntactic entities 

Hidden categories:
Navigation menu

    Not logged in
    Talk
    Contributions
    Create account
    Log in 

    Article
    Talk 

    Read
    Edit
    View history 

Search

    Main page
    Contents
    Current events
    Random article
    About Wikipedia
    Contact us
    Donate 

Contribute

    Help
    Learn to edit
    Community portal
    Recent changes
    Upload file 

Tools

    What links here
    Related changes
    Special pages
    Permanent link
    Page information
    Cite this page
    Wikidata item 

Print/export

    Download as PDF
    Printable version 

Languages

    Deutsch
    Esperanto
    فارسی
    Français
    Nederlands
    Polski 

Edit links

    This page was last edited on 5 April 2022, at 12:02  (UTC) .
    Text is available under the Creative Commons Attribution-ShareAlike License 3.0 ; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc. , a non-profit organization.

    Privacy policy
    About Wikipedia
    Disclaimers
    Contact Wikipedia
    Mobile view
    Developers
    Statistics
    Cookie statement

    Wikimedia Foundation
    Powered by MediaWiki

